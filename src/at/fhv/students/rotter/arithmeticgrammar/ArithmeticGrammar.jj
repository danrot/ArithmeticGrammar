/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(EG1)package at.fhv.students.rotter.arithmeticgrammar;

import java.util.HashSet;
import java.util.HashMap;

public class EG1{
  static HashMap<String, Integer> variables = new HashMap<String, Integer>();
  static HashSet<String> used = new HashSet<String>();
    public static void main(String args []) throws ParseException  {    EG1 parser = new EG1(System.in);    System.out.println("Reading from standard input...");    try    {      EG1.evaluation();    }    catch (Exception e)    {      System.out.println("NOK.");      System.out.println(e.getMessage());      EG1.ReInit(System.in);    }    catch (Error e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(EG1)SKIP :{  " "| "\r"| "\t"| "\n"}

TOKEN :
{
  < #LETTER: ["a" - "z"] >
| < #DIGIT: ["0" - "9"] >
| < VAR: (< LETTER >)+ >
| < NUMBER: (< DIGIT >)+ >
| < ASSIGN: "=" >
| < SEMICOLON: ";" >
| < PLUS: "+" >
| < MINUS: "-" >
| < MULTIPLY: "*" >
| < DIVIDE: "/" >
| < OPENBRACKET: "(" >
| < CLOSEBRACKET: ")" >}void evaluation() :
{
  Token var;
  Token value;
  int result;}
{
  (
    LOOKAHEAD(2)    var = < VAR >    {
      if (variables.keySet().contains(var.image))      {
        System.out.println("Variable " + var.image + " has already been declared!");
        System.exit(2);      }    }
    < ASSIGN >
    value = < NUMBER >
    {
      variables.put(var.image, Integer.parseInt(value.image));    }
    < SEMICOLON >
  )+
  result = expr() < ASSIGN >
  {
    for (String name : variables.keySet())
    {
      if (!used.contains(name))
      {
        System.out.println("Variable " + name + " not used!");
      }
    }
    System.out.println("The result is " + result);
  }}

int expr() :
{
  Token operand;
  int value;
  int sum;
}
{
  value = term()
  {
    sum = value;  }
  (
    (
      operand = < PLUS >
    | operand = < MINUS >
    )
    value = term()
    {
      if (operand.image == "+")      {
        sum += value;      }
      else if (operand.image == "-")
      {		sum -= value;
      }    }
  )*
  {
    return sum;  }
}

int term() :
{
  Token operand;
  int value;
  int product;
}
{
  value = factor()
  {
    product = value;  }
  (
    (
      operand = < MULTIPLY >
    | operand = < DIVIDE >
    )
    value = factor()
    {
      if (operand.image == "*")      {
        product *= value;      }
      else if (operand.image == "/")      {		product /= value;
      }    }
  )*
  {	return product;
  }
}

int factor() :
{
  Token var;
  Token number;
  int value;
}
{
  number = < NUMBER >
  {	return Integer.parseInt(number.image);
  }
  | var = < VAR >
  {	if (!variables.keySet().contains(var.image))	{
	  System.out.println("Variable " + var.image + " has not been declared!");
	  System.exit(1);	}
	used.add(var.image);

	return variables.get(var.image);
  }
  | < OPENBRACKET >
  	value = expr()
  	< CLOSEBRACKET >
  	{	  return value;
  	}
}